// Treniren Training Diary - Database Schema
// Based on app-planning requirements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum WorkoutType {
  GYM
  BOULDERING
  CIRCUITS
  LEAD_ROCK
  LEAD_ARTIFICIAL
  MENTAL_PRACTICE
}

enum TrainingVolume {
  TR1
  TR2
  TR3
  TR4
  TR5
}

enum MentalPracticeType {
  MEDITATION
  REFLECTING
  OTHER
}

enum TimeOfDay {
  MORNING
  MIDDAY
  EVENING
}

enum EventType {
  INJURY
  PHYSIO
  COMPETITION
  TRIP
  OTHER
}

enum TripClimbingType {
  BOULDERING
  SPORT_CLIMBING
}

enum FocusState {
  CHOKE
  DISTRACTION
  PRESENT
  FOCUSED
  CLUTCH
  FLOW
}

enum ComfortZone {
  COMFORT
  STRETCH1
  STRETCH2
  PANIC
}

enum BoulderType {
  SLAB
  VERTICAL
  OVERHANG
  ROOF
  COMPSTYLE
}

enum BoulderFormation {
  POWERFUL
  TECHNICAL
  COMPSTYLE
}

enum Formation {
  SLAB
  VERTICAL
  SLIGHT_OVERHANG
  STRONG_OVERHANG
}

// Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?   // Google name
  nickname      String?   // User's preferred display name
  password      String?   // For email/password authentication
  emailVerified DateTime? // Email verification timestamp
  image         String?   // Profile image URL (for OAuth providers)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication relations
  accounts      Account[]
  sessions      Session[]
  resetTokens   PasswordResetToken[]

  // App relations
  profile       UserProfile?
  plans         Plan[]
  workouts      Workout[]
  exercises     Exercise[]
  events        Event[]
  tags          Tag[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model UserProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  photoUrl           String?
  googleSheetsUrl    String?
  cycleAvgLengthDays Int       @default(28)
  lastPeriodDate     DateTime?
  timezone           String    @default("Europe/Warsaw")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Plan {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  title     String
  label     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]
  planTags PlanTag[]

  @@map("plans")
}

model Workout {
  id                 String              @id @default(cuid())
  planId             String?
  userId             String
  type               WorkoutType
  startTime          DateTime
  endTime            DateTime?
  trainingVolume     TrainingVolume?
  details            Json? // Type-specific fields
  preSessionFeel     Int?
  dayAfterTiredness  Int?
  focusLevel         Int?
  notes              String?
  sector             String? // For lead_rock workouts
  mentalPracticeType MentalPracticeType? // For mental practice workouts
  timeOfDay          Json? // For mental practice workouts - array of TimeOfDay values
  gratitude          String? // 3 things I am grateful for
  improvements       String? // 3 things to do better next time
  mentalState        Json? // Mental state data including climb sections
  calendarEventId    String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  plan             Plan?             @relation(fields: [planId], references: [id], onDelete: SetNull)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  workoutTags      WorkoutTag[]

  @@map("workouts")
}

model Event {
  id                String            @id @default(cuid())
  userId            String
  type              EventType
  title             String
  date              DateTime
  startTime         DateTime?
  endTime           DateTime?
  description       String?
  location          String?
  severity          Int? // 1-5 scale for injuries
  status            String? // e.g., "Recovering", "Healed", "Ongoing" for injuries
  notes             String?
  // Trip-specific fields
  tripStartDate     DateTime? // For trip events
  tripEndDate       DateTime? // For trip events
  destination       String? // For trip events
  climbingType       TripClimbingType? // For trip events
  showCountdown     Boolean @default(false) // For trip events - show countdown on landing page
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventTags   EventTag[]

  @@map("events")
}

model Exercise {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    String?
  defaultUnit String   @default("kg")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String
  order      Int

  // Relations
  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sets     Set[]

  @@unique([workoutId, exerciseId])
  @@map("workout_exercises")
}

model Set {
  id                String   @id @default(cuid())
  workoutExerciseId String
  setNumber         Int
  reps              Int?
  weight            Float? // in kg
  rir               Int? // Reps in Reserve
  success           Boolean?
  notes             String?
  createdAt         DateTime @default(now())

  // Relations
  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@map("sets")
}

model Tag {
  id        String   @id @default(cuid())
  userId    String
  name      String
  color     String   @default("#3b82f6")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  planTags    PlanTag[]
  workoutTags WorkoutTag[]
  eventTags   EventTag[]

  @@unique([userId, name])
  @@map("tags")
}

model PlanTag {
  planId String
  tagId  String

  // Relations
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([planId, tagId])
  @@map("plan_tags")
}

model WorkoutTag {
  workoutId String
  tagId     String

  // Relations
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([workoutId, tagId])
  @@map("workout_tags")
}

model EventTag {
  eventId String
  tagId   String

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([eventId, tagId])
  @@map("event_tags")
}
